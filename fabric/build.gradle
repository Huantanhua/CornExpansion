plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

fabricApi {
    configureDataGeneration()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"


    modImplementation "com.terraformersmc.terraform-api:terraform-wood-api-v1:${project.terraform_wood_api_version}"
    modImplementation "maven.modrinth:do-api:${project.doapi_version}-fabric"
    modImplementation "maven.modrinth:lets-do-farm-charm:${project.farm_and_charm_version}-fabric"

    modImplementation("com.simibubi.create:create-fabric-${project.minecraft_version}:${project.create_fabric_version}+mc${project.minecraft_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

loom {
    Project common = project(":common")
    // Datagen, while this is in fabric only, it generates files for forge too
    runs {
        datagen {
            client()
            name "Data Generation (client)"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${common.file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=cornexpansion"
            vmArg "-Dporting_lib.datagen.existing_resources=${common.file("src/main/resources")}"

            runDir "build/datagen"
        }
    }
    runs {
        mixinDebug {
            inherit client
            name "Mixin Debug"
            vmArg "-Dmixin.debug.export=true"
        }
    }

    accessWidenerPath = common.file("src/main/resources/cornexpansion.accesswidener")
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
            exclude ".cache/**"
        }
    }
}
